"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTernaryDarkMode = void 0;
var react_1 = require("react");
var useLocalStorage_1 = require("../useLocalStorage");
var useMediaQuery_1 = require("../useMediaQuery");
var useUpdateEffect_1 = require("../useUpdateEffect");
var COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';
var LOCAL_STORAGE_KEY = 'usehooks-ts-ternary-dark-mode';
function useTernaryDarkMode(localStorageKey) {
    if (localStorageKey === void 0) { localStorageKey = LOCAL_STORAGE_KEY; }
    var isDarkOS = (0, useMediaQuery_1.useMediaQuery)(COLOR_SCHEME_QUERY);
    var _a = (0, useLocalStorage_1.useLocalStorage)(localStorageKey, 'system'), ternaryDarkMode = _a[0], setTernaryDarkMode = _a[1];
    var _b = (0, react_1.useState)(isDarkOS), isDarkMode = _b[0], setDarkMode = _b[1];
    (0, useUpdateEffect_1.useUpdateEffect)(function () {
        if (ternaryDarkMode === 'system') {
            setDarkMode(isDarkOS);
        }
    }, [isDarkOS]);
    (0, react_1.useEffect)(function () {
        switch (ternaryDarkMode) {
            case 'light':
                setDarkMode(false);
                break;
            case 'system':
                setDarkMode(isDarkOS);
                break;
            case 'dark':
                setDarkMode(true);
                break;
        }
    }, [ternaryDarkMode, isDarkOS]);
    function toggleTernaryDarkMode() {
        var toggleDict = {
            light: 'system',
            system: 'dark',
            dark: 'light',
        };
        setTernaryDarkMode(function (prevMode) { return toggleDict[prevMode]; });
    }
    return {
        isDarkMode: isDarkMode,
        ternaryDarkMode: ternaryDarkMode,
        setTernaryDarkMode: setTernaryDarkMode,
        toggleTernaryDarkMode: toggleTernaryDarkMode,
    };
}
exports.useTernaryDarkMode = useTernaryDarkMode;
