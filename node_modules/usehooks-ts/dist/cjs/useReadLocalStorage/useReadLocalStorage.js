"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useReadLocalStorage = void 0;
var react_1 = require("react");
var useEventListener_1 = require("../useEventListener");
var IS_SERVER = typeof window === 'undefined';
function useReadLocalStorage(key, options) {
    if (options === void 0) { options = {}; }
    var _a = (0, react_1.useState)(null), storedValue = _a[0], setStoredValue = _a[1];
    var deserializer = (0, react_1.useCallback)(function (value) {
        if (options.deserializer) {
            return options.deserializer(value);
        }
        if (value === 'undefined') {
            return undefined;
        }
        return JSON.parse(value);
    }, [options]);
    var readValue = (0, react_1.useCallback)(function () {
        if (IS_SERVER) {
            return null;
        }
        try {
            var raw = window.localStorage.getItem(key);
            return raw ? deserializer(raw) : null;
        }
        catch (error) {
            console.warn("Error reading localStorage key \u201C".concat(key, "\u201D:"), error);
            return null;
        }
    }, [key, deserializer]);
    (0, react_1.useEffect)(function () {
        setStoredValue(readValue());
    }, [key]);
    var handleStorageChange = (0, react_1.useCallback)(function (event) {
        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {
            return;
        }
        setStoredValue(readValue());
    }, [key, readValue]);
    (0, useEventListener_1.useEventListener)('storage', handleStorageChange);
    (0, useEventListener_1.useEventListener)('local-storage', handleStorageChange);
    return storedValue;
}
exports.useReadLocalStorage = useReadLocalStorage;
