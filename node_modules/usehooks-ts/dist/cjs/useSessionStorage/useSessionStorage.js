"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSessionStorage = void 0;
var react_1 = require("react");
var useEventCallback_1 = require("../useEventCallback");
var useEventListener_1 = require("../useEventListener");
var IS_SERVER = typeof window === 'undefined';
function useSessionStorage(key, initialValue, options) {
    if (options === void 0) { options = {}; }
    var _a = (0, react_1.useState)(initialValue), storedValue = _a[0], setStoredValue = _a[1];
    var serializer = (0, react_1.useCallback)(function (value) {
        if (options.serializer) {
            return options.serializer(value);
        }
        if (value instanceof Map) {
            return JSON.stringify(Object.fromEntries(value));
        }
        if (value instanceof Set) {
            return JSON.stringify(Array.from(value));
        }
        return JSON.stringify(value);
    }, [options]);
    var deserializer = (0, react_1.useCallback)(function (value) {
        if (options.deserializer) {
            return options.deserializer(value);
        }
        if (value === 'undefined') {
            return undefined;
        }
        var parsed = JSON.parse(value);
        if (initialValue instanceof Set) {
            return new Set(parsed);
        }
        if (initialValue instanceof Map) {
            return new Map(Object.entries(parsed));
        }
        if (initialValue instanceof Date) {
            return new Date(parsed);
        }
        return parsed;
    }, [options, initialValue]);
    var readValue = (0, react_1.useCallback)(function () {
        var initialValueToUse = initialValue instanceof Function ? initialValue() : initialValue;
        if (IS_SERVER) {
            return initialValueToUse;
        }
        try {
            var raw = window.sessionStorage.getItem(key);
            return raw ? deserializer(raw) : initialValueToUse;
        }
        catch (error) {
            console.warn("Error reading sessionStorage key \u201C".concat(key, "\u201D:"), error);
            return initialValueToUse;
        }
    }, [initialValue, key, deserializer]);
    var setValue = (0, useEventCallback_1.useEventCallback)(function (value) {
        if (IS_SERVER) {
            console.warn("Tried setting sessionStorage key \u201C".concat(key, "\u201D even though environment is not a client"));
        }
        try {
            var newValue = value instanceof Function ? value(readValue()) : value;
            window.sessionStorage.setItem(key, serializer(newValue));
            setStoredValue(newValue);
            window.dispatchEvent(new StorageEvent('session-storage', { key: key }));
        }
        catch (error) {
            console.warn("Error setting sessionStorage key \u201C".concat(key, "\u201D:"), error);
        }
    });
    (0, react_1.useEffect)(function () {
        setStoredValue(readValue());
    }, [key]);
    var handleStorageChange = (0, react_1.useCallback)(function (event) {
        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {
            return;
        }
        setStoredValue(readValue());
    }, [key, readValue]);
    (0, useEventListener_1.useEventListener)('storage', handleStorageChange);
    (0, useEventListener_1.useEventListener)('session-storage', handleStorageChange);
    return [storedValue, setValue];
}
exports.useSessionStorage = useSessionStorage;
