import { useCallback, useEffect, useState, } from 'react';
import { useEventCallback } from '../useEventCallback';
import { useEventListener } from '../useEventListener';
const IS_SERVER = typeof window === 'undefined';
export function useSessionStorage(key, initialValue, options = {}) {
    const [storedValue, setStoredValue] = useState(initialValue);
    const serializer = useCallback(value => {
        if (options.serializer) {
            return options.serializer(value);
        }
        if (value instanceof Map) {
            return JSON.stringify(Object.fromEntries(value));
        }
        if (value instanceof Set) {
            return JSON.stringify(Array.from(value));
        }
        return JSON.stringify(value);
    }, [options]);
    const deserializer = useCallback(value => {
        if (options.deserializer) {
            return options.deserializer(value);
        }
        if (value === 'undefined') {
            return undefined;
        }
        const parsed = JSON.parse(value);
        if (initialValue instanceof Set) {
            return new Set(parsed);
        }
        if (initialValue instanceof Map) {
            return new Map(Object.entries(parsed));
        }
        if (initialValue instanceof Date) {
            return new Date(parsed);
        }
        return parsed;
    }, [options, initialValue]);
    const readValue = useCallback(() => {
        const initialValueToUse = initialValue instanceof Function ? initialValue() : initialValue;
        if (IS_SERVER) {
            return initialValueToUse;
        }
        try {
            const raw = window.sessionStorage.getItem(key);
            return raw ? deserializer(raw) : initialValueToUse;
        }
        catch (error) {
            console.warn(`Error reading sessionStorage key “${key}”:`, error);
            return initialValueToUse;
        }
    }, [initialValue, key, deserializer]);
    const setValue = useEventCallback(value => {
        if (IS_SERVER) {
            console.warn(`Tried setting sessionStorage key “${key}” even though environment is not a client`);
        }
        try {
            const newValue = value instanceof Function ? value(readValue()) : value;
            window.sessionStorage.setItem(key, serializer(newValue));
            setStoredValue(newValue);
            window.dispatchEvent(new StorageEvent('session-storage', { key }));
        }
        catch (error) {
            console.warn(`Error setting sessionStorage key “${key}”:`, error);
        }
    });
    useEffect(() => {
        setStoredValue(readValue());
    }, [key]);
    const handleStorageChange = useCallback((event) => {
        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {
            return;
        }
        setStoredValue(readValue());
    }, [key, readValue]);
    useEventListener('storage', handleStorageChange);
    useEventListener('session-storage', handleStorageChange);
    return [storedValue, setValue];
}
