import { useCallback, useEffect, useState } from 'react';
import { useEventListener } from '../useEventListener';
const IS_SERVER = typeof window === 'undefined';
export function useReadLocalStorage(key, options = {}) {
    const [storedValue, setStoredValue] = useState(null);
    const deserializer = useCallback(value => {
        if (options.deserializer) {
            return options.deserializer(value);
        }
        if (value === 'undefined') {
            return undefined;
        }
        return JSON.parse(value);
    }, [options]);
    const readValue = useCallback(() => {
        if (IS_SERVER) {
            return null;
        }
        try {
            const raw = window.localStorage.getItem(key);
            return raw ? deserializer(raw) : null;
        }
        catch (error) {
            console.warn(`Error reading localStorage key “${key}”:`, error);
            return null;
        }
    }, [key, deserializer]);
    useEffect(() => {
        setStoredValue(readValue());
    }, [key]);
    const handleStorageChange = useCallback((event) => {
        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {
            return;
        }
        setStoredValue(readValue());
    }, [key, readValue]);
    useEventListener('storage', handleStorageChange);
    useEventListener('local-storage', handleStorageChange);
    return storedValue;
}
